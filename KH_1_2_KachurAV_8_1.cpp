/*
Група: KH–1-2
Здобувач: Качур Антон Вікторович
Лабораторна робота №8
Завдання 1
Тема лабораторної роботи: Розв’язання задач обробки символьних рядків.
Завдання: Розробити блок-схему алгоритму та реалізувати його мовою С\С++ для обробки слова або символьного 
рядка, що оголошено з використанням типу даних char, у відповідності до індивідуального завдання у таблиці 
8.1. Результат вивести різними кольорами.

У заданому символьному рядку знайти слово найменшої довжини. Словом вважати послідовність букв, що розділені пробілами.
*/

#include <iostream>
#include <cstring>
#include <windows.h>
#include <cctype>

using namespace std;

// Функція, призначена для зміни кольору виводу. 
// В якості аргументів передаються числові значення кольорів тексту і тла
void SetColor(int text, int background) {
	// змінна, яка позначає дескриптор екрану консолі виводу
	HANDLE hStdOut = GetStdHandle(STD_OUTPUT_HANDLE);
	// присвоєння значень кольорів тексту, який виводиться в консоль
	SetConsoleTextAttribute(hStdOut, (WORD)((background << 4) | text));
}


// Функція, яка прибирає розділові знаки зі слова
char* removePunctuation(char* word) {
    int i, j = 0; // індекс для позначення символів без пунктуації

    for (i = 0; i < strlen(word); i++)
        if (!ispunct(word[i]))
            word[j++] = word[i]; // зберігаємо символ, що не містить пунктуації
    
    // встановлюємо нульовий символ після останнього символу в word. 
	// Це означає, що рядок не міститиме сміття після останнього символу без пунктуації
    word[j] = '\0';
    
    return word;
}


int main() {
	system("cls"); // викликаємо функцію очистку екрану
	// наступні дві команди призначено для відображення кирилиці у консольному вікні
	SetConsoleCP(1251); // встановлення кодової сторінки win-cp 1251 для потоку введення
	SetConsoleOutputCP(1251); // встановлення кодової сторінки win-cp 1251 до потоку виведення
	
	/* Програмний код для розв'язку поставленого завдання */
	int n = 100;
	char str[n] = "";	
		
	SetColor(11, 1);
	cout << "Введіть речення: ";
	cin.getline(str, n); // зчитуємо символьний рядок (з пробілами)
	
	// Наступний рядок демонструє токенізацію рядка - це розділення його на окремі фрагменти (токени) за певними роздільниками 
	// (в даному випадку за пробілами). За принципом роботи функцію strtok можна порівняти з функцією split з мови програмування Java.
	char* token = strtok(str, " ");
	
    if (token == NULL) {
    	SetColor(0, 4);
        cout << "Речення пусте" << endl;
    } else {
    	char* shortestWord = token; // ініціалізуємо змінну першим словом у реченні

	    while (token != NULL) {
	        if (strlen(token) < strlen(shortestWord))
				// якщо знайдене слово коротше за shortestWord - прибираємо пунктуацію та записуємо його
	            shortestWord = removePunctuation(token); 
	            
	        token = strtok(NULL, " "); // переходимо до наступного токену
	    }
	    
		SetColor(0, 2);
		cout << "Найкоротше слово: " << shortestWord << endl;
	}

    
	// наступні 3 рядки демонструють встановлення стандартних кольорів тексту і тла та
	// призупинення роботи програми
	SetColor(7, 0);
	cout << "\n";
	system("pause");
	
	return 0;
}
